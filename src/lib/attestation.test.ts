import { expect, test } from "bun:test";
import { createSigStructure, parseDocumentData, parseDocumentPayload } from "./attestation";
import { encode } from "@stablelib/base64";

const HARDCODED_TEST_ATTESTATION_DOCUMENT =
  "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";

const EXPECTED_MODULE_ID = "i-06c79bf817127030a-enc0192d3d4945e0432";

const EXPECTED_SIGNATURE_STRUCTURE_DIGEST =
  "4OIYuQwzjYJFBjHw0eI4cTKT3mUCMNo0yqgPmPGOFCnoFGes3/qjUhXHbxe/HREv";

test("Decode document data", async () => {
  const parsedDocument = await parseDocumentData(HARDCODED_TEST_ATTESTATION_DOCUMENT);
  const parsedPayload = await parseDocumentPayload(parsedDocument.payload);

  expect(parsedPayload.module_id).toBe(EXPECTED_MODULE_ID);
});

test("Makes CoseSign1 bytes correctly", async () => {
  const parsedDocument = await parseDocumentData(HARDCODED_TEST_ATTESTATION_DOCUMENT);

  const coseSign1 = await createSigStructure(parsedDocument.protected, parsedDocument.payload);

  // crypto.subtle isn't available in node so we have to use bun to test this file
  const hash = await crypto.subtle.digest("SHA-384", coseSign1);

  expect(encode(new Uint8Array(hash))).toBe(EXPECTED_SIGNATURE_STRUCTURE_DIGEST);
});
